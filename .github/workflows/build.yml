name: CI
on: [push, pull_request]

env:
  CI: "ON"
  HOMEBREW_NO_ANALYTICS: "ON"
  HOMEBREW_NO_AUTO_UPDATE: "ON"
  HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
  HOMEBREW_NO_GITHUB_API: "ON"
  HOMEBREW_NO_INSTALL_CLEANUP: "ON"
  BUILD_DIR: _build
  CMAKE_OPTIONS: >-
    -DCMAKE_BUILD_TYPE=Debug
    -DWITH_API=true
    -DWITH_DFTD3=true
    -DWITH_MBD=true
    -DWITH_TRANSPORT=true
    -DFYPP_FLAGS='-DTRAVIS'

jobs:
  gcc-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        mpi: [nompi, openmpi]
        exclude:
          - os: macos-latest
            mpi: openmpi

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Enable MPI build
      if: contains(matrix.mpi, 'openmpi') || contains(matrix.mpi, 'mpich')
      run: echo "WITH_MPI=true" >> $GITHUB_ENV

    - name: Disable MPI build
      if: contains(matrix.mpi, 'nompi')
      run: echo "WITH_MPI=false" >> $GITHUB_ENV

    - name: Set Compiler (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        echo "FC=gfortran" >> $GITHUB_ENV
        echo "CC=gcc" >> $GITHUB_ENV

    - name: Set Compiler (OSX)
      if: contains(matrix.os, 'macos')
      run: |
        echo "FC=gfortran-9" >> $GITHUB_ENV
        echo "CC=gcc-9" >> $GITHUB_ENV

    - name: Check submodule commits
      run: ./utils/test/check_submodule_commits

    - name: Install ARPACK (Linux)
      if: contains(matrix.os, 'ubuntu') && contains(matrix.mpi, 'nompi')
      run: |
        sudo apt-get install libarpack2-dev
        echo "CMAKE_OPTIONS=${CMAKE_OPTIONS} -DWITH_ARPACK=true" >> $GITHUB_ENV

    - name: Install OpenMPI (OSX)
      if: contains(matrix.os, 'macos') && contains(matrix.mpi, 'openmpi')
      run: |
        brew install open-mpi scalapack

    - name: Install OpenMPI (Linux)
      if: contains(matrix.os, 'ubuntu') && contains(matrix.mpi, 'openmpi')
      run: |
        sudo apt-get install libopenmpi-dev libscalapack-openmpi-dev
        echo "CMAKE_OPTIONS=${CMAKE_OPTIONS} -DSCALAPACK_LIBRARY='scalapack-openmpi'" >> $GITHUB_ENV
        echo "CMAKE_DEP_OPTIONS=-DSCALAPACK_LIBRARY='scalapack-openmpi'" >> $GITHUB_ENV

    - name: Install cmake
      run: pip3 install cmake ninja fypp numpy

    - name: Get external dependencies
      run: echo "y" | ./utils/get_opt_externals ALL

    - name: Configure build
      run: >-
        cmake -B _build -G Ninja
        -DCMAKE_INSTALL_PREFIX=${PWD}/_install
        ${CMAKE_OPTIONS}
        -DWITH_MPI=${WITH_MPI}

    - name: Build project
      run: cmake --build ${BUILD_DIR}

    - name: Run regression tests
      run: |
        pushd ${BUILD_DIR}
        ctest -j 2 --output-on-failure
        popd

    - name: Install project
      run: |
        cmake --install ${BUILD_DIR}

    - name: Run integration CMake test
      run: >-
        CMAKE_PREFIX_PATH="${PWD}/_install:${CMAKE_PREFIX_PATH}"
        ./test/integration/cmake/runtest.sh ${BUILD_DIR}_cmake
        ${CMAKE_DEP_OPTIONS}

    - name: Run integration pkg-config test
      run: >-
        PKG_CONFIG_PATH="${PWD}/_install/lib/pkgconfig:${PKG_CONFIG_PATH}"
        ./test/integration/pkgconfig/runtest.sh ${BUILD_DIR}_pkgconfig

  gcc-mkl-build:
    if: github.event_name == 'push'
    runs-on: ubuntu-20.04

    env:
      WITH_MPI: false
      FC: gfortran-9
      CC: gcc-9

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Check submodule commits
      run: ./utils/test/check_submodule_commits

    - name: Install library dependencies
      run: |
        sudo apt-get install libarpack2-dev libmkl-dev

    - name: Install cmake
      run: pip3 install cmake ninja fypp numpy

    - name: Get external dependencies
      run: ./utils/get_opt_externals UNRESTRICTED

    - name: Configure build
      run: >-
        cmake -B _build -G Ninja
        -DCMAKE_INSTALL_PREFIX=/
        -DCMAKE_TOOLCHAIN_FILE=sys/gnu-mkl-static.cmake
        -DWITH_MPI=${WITH_MPI}

    - name: Build project
      run: cmake --build ${BUILD_DIR}

    - name: Run regression tests
      run: |
        pushd ${BUILD_DIR}
        ctest -j 2 --output-on-failure
        popd

    - name: Install project
      run: |
        cmake --install ${BUILD_DIR}
        tar cJvf dftbplus-current.tar.xz dftbplus-current
      env:
        DESTDIR: ${{ env.PWD }}/dftbplus-current

    - name: Upload binary
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: dftbplus-current.tar.xz
        path: dftbplus-current.tar.xz

  # Inspired from https://github.com/endless-sky/endless-sky
  continuous-delivery:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs:
      - gcc-mkl-build

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TAG: current
      OUTPUT_GCC_MKL: dftbplus-current.tar.xz

    steps:
    - uses: actions/checkout@v2

    - name: Install github-release
      run: |
        go get github.com/github-release/github-release
        echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Set environment variables
      run: |
        echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
        echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

    - name: Move/Create continuous tag
      run: |
        git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
        git push --tags --force

    - name: Get Time
      run: echo "TIME=$(date -u '+%Y/%m/%d, %H:%M')" >> $GITHUB_ENV

    - name: Check continuous release status
      run: |
        if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
          echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
        else
          echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
        fi

    - name: Setup continuous release
      run: >-
        github-release ${{ env.RELEASE_COMMAND }}
        --tag ${{ env.RELEASE_TAG }}
        --name "Bleeding edge version"
        --description "$DESCRIPTION"
        --pre-release
      env:
        DESCRIPTION: |
          Created on ${{ env.TIME }} UTC by @${{ github.actor }} with commit ${{ github.sha }}.
          This is an automated distribution of the latest DFTB+ version. This version contains both the latest features and newest bugs. Use with caution!
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: ${{ github.workspace }} # This will download all files

    - name: Create SHA256 checksum
      run: |
        cd ${{ env.OUTPUT_GCC_MKL }}
        sha256sum ${{ env.OUTPUT_GCC_MKL }} > sha256.txt

    - name: Add ${{ env.OUTPUT_GCC_MKL }} to release tag
      run: >-
        github-release upload
        --tag ${{ env.RELEASE_TAG }}
        --replace
        --name ${{ env.OUTPUT_GCC_MKL }}
        --file ${{ env.OUTPUT_GCC_MKL }}/${{ env.OUTPUT_GCC_MKL }}

    - name: Add SHA256 checksums to release tag
      run: >-
        github-release upload
        --tag ${{ env.RELEASE_TAG }}
        --replace
        --name sha256.txt
        --file ${{ env.OUTPUT_GCC_MKL }}/sha256.txt
