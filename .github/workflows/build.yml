name: CI
on: [push, pull_request]

env:
  CI: "ON"
  BUILD_DIR: _build
  CMAKE_OPTIONS: >-
    -DBUILD_SHARED_LIBS=true
    -DENABLE_DYNAMIC_LOADING=true
    -DLAPACK_LIBRARY=lapack
    -DBLAS_LIBRARY=blas
    -DSCALAPACK_LIBRARY=scalapack
    -DWITH_API=true
    -DWITH_SDFTD3=true
    -DWITH_TBLITE=true
    -DWITH_MBD=true
    -DWITH_TRANSPORT=true
    -DFYPP_FLAGS='-n;-DTRAVIS'
    -DWITH_UNIT_TESTS=true
    -DWITH_CHIMES=true
    -DWITH_PYTHON=true

jobs:
  gcc-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        mpi: [nompi]
        config: [Debug]
        include:
          - os: ubuntu-latest
            mpi: nompi
            config: Coverage
            version: 9.*
          - os: ubuntu-latest
            mpi: mpich
            config: Debug
          - os: macos-latest
            mpi: openmpi
            config: Debug

    defaults:
      run:
        shell: bash -l {0}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: utils/build/${{ matrix.mpi }}-dev.yaml
        extra-specs: |
          ${{ contains(matrix.os, 'macos') && 'clang' || 'gcc' }} ${{ matrix.version || '*' }}
          gfortran ${{ matrix.version || '*' }}
          ${{ matrix.config == 'Coverage' && 'gcovr' || '' }}

    - name: Check submodule commits
      run: ./utils/test/check_submodule_commits

    - name: Get external dependencies
      run: ./utils/get_opt_externals ALL

    - name: Configure build
      run: >-
        cmake -B _build -G Ninja
        -DCMAKE_INSTALL_PREFIX=${PWD}/_install
        -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        ${{ env.CMAKE_OPTIONS }}
        -DWITH_MPI=${{ matrix.mpi != 'nompi' && 'true' || 'false' }}
        -DWITH_ARPACK=${{ matrix.mpi == 'nompi' && 'true' || 'false' }}

    - name: Build project
      run: cmake --build ${{ env.BUILD_DIR }}

    - name: Run regression tests
      run: |
        ctest --test-dir ${{ env.BUILD_DIR }} -j 2 --output-on-failure

    - name: Install project
      run: |
        cmake --install ${{ env.BUILD_DIR }}

    - name: Create gcov reports
      if: ${{ contains(matrix.config, 'Coverage') }}
      run: ./utils/test/make_gcov_reports ${PWD} ${PWD}/_build/gcovs ${PWD}/_build/src ${PWD}/_build/app

    - name: Upload coverage report
      if: ${{ contains(matrix.config, 'Coverage') }}
      uses: codecov/codecov-action@v1
      with:
        directory: _build/gcovs
        functionalities: gcov

    - name: Run integration CMake test
      run: >-
        CMAKE_PREFIX_PATH="${PWD}/_install:${CMAKE_PREFIX_PATH}"
        ./test/src/dftbp/integration/cmake/runtest.sh ${{ env.BUILD_DIR }}_cmake
        ${CMAKE_DEP_OPTIONS}

    - name: Run integration pkg-config test
      run: >-
        PKG_CONFIG_PATH="${PWD}/_install/lib/pkgconfig:${PKG_CONFIG_PATH}"
        ./test/src/dftbp/integration/pkgconfig/runtest.sh ${{ env.BUILD_DIR }}_pkgconfig

  intel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        mpi: [nompi]
        config: [Debug]
    defaults:
      run:
        shell: bash -l {0}
    env:
      FC: ifort
      CC: icc
      APT_PACKAGES: >-
        intel-oneapi-compiler-fortran
        intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
      CMAKE_OPTIONS: >-
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DWITH_API=true
        -DWITH_SDFTD3=true
        -DWITH_MBD=true
        -DWITH_TRANSPORT=true
        -DFYPP_FLAGS='-DTRAVIS'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: utils/build/${{ matrix.mpi }}-dev.yaml

    - name: Add Intel repository
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI compiler
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        sudo apt-get update
        sudo apt-get install ${{ env.APT_PACKAGES }}
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Get external dependencies
      run: ./utils/get_opt_externals ALL

    - name: Configure build
      run: >-
        cmake -B _build -G Ninja
        -DCMAKE_INSTALL_PREFIX=${PWD}/_install
        -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        -DCMAKE_BUILD_TYPE=Debug
        ${{ env.CMAKE_OPTIONS }}
        -DWITH_MPI=${{ matrix.mpi != 'nompi' && 'true' || 'false' }}

    - name: Build project
      run: cmake --build ${{ env.BUILD_DIR }}

    - name: Run regression tests
      run: |
        ctest --test-dir ${{ env.BUILD_DIR }} -j 2 --output-on-failure

    - name: Install project
      run: |
        cmake --install ${{ env.BUILD_DIR }}
